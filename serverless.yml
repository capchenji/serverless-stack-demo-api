service: notes-app-api

# Use serverless-webpack plugin to transpile ES6/ES7
plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

# Enable auto-packing of external modules
custom:
  webpackIncludeModules: true
  #easy lookup of variables
  region: ${opt:region, self:provider.region}
  serverless-iam-roles-per-function:
    defaultInherit: true

provider:
  name: aws
  runtime: nodejs6.10
  stage: test
  region: us-east-1

  # Define xray permissions which each role per-function will inherit
  iamRoleStatements:    
    - Effect: "Allow"
      Action:
        - xray:PutTelemetryRecords
        - xray:PutTraceSegments
      Resource: "*"
  
functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /notes
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  create:
    handler: create.main    
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:PutItem
        Resource: "arn:aws:dynamodb:${self:custom.region}:*:table/notes"
    events:
      - http:
          path: notes
          method: post
          cors: true
          authorizer: aws_iam

  get:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /notes/{id}
    # - method: GET request
    handler: get.main    
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:GetItem
        Resource: "arn:aws:dynamodb:${self:custom.region}:*:table/notes"    
    events:
      - http:
          path: notes/{id}
          method: get
          cors: true
          authorizer: aws_iam

  list:
    # Defines an HTTP API endpoint that calls the main function in list.js
    # - path: url path is /notes
    # - method: GET request
    handler: list.main    
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:Query
        Resource: "arn:aws:dynamodb:${self:custom.region}:*:table/notes"
    events:
      - http:
          path: notes
          method: get
          cors: true
          authorizer: aws_iam

  update:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is /notes/{id}
    # - method: PUT request
    handler: update.main    
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:UpdateItem
        Resource: "arn:aws:dynamodb:${self:custom.region}:*:table/notes"
    events:
      - http:
          path: notes/{id}
          method: put
          cors: true
          authorizer: aws_iam

  delete:
    # Defines an HTTP API endpoint that calls the main function in delete.js
    # - path: url path is /notes/{id}
    # - method: DELETE request
    handler: delete.main    
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:DeleteItem
        Resource: "arn:aws:dynamodb:${self:custom.region}:*:table/notes"
    events:
      - http:
          path: notes/{id}
          method: delete
          cors: true
          authorizer: aws_iam

resources:
  Resources:    
    #add aws xray config to our functions
    CreateLambdaFunction: 
      Type: AWS::Lambda::Function
      Properties:
        TracingConfig: 
          Mode:
            Active
    GetLambdaFunction: 
      Type: AWS::Lambda::Function
      Properties:
        TracingConfig: 
          Mode:
            Active
    DeleteLambdaFunction: 
      Type: AWS::Lambda::Function
      Properties:
        TracingConfig: 
          Mode:
            Active
    ListLambdaFunction: 
      Type: AWS::Lambda::Function
      Properties:
        TracingConfig: 
          Mode:
            Active
    UpdateLambdaFunction: 
      Type: AWS::Lambda::Function
      Properties:
        TracingConfig: 
          Mode:
            Active